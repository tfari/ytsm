""" Provide Logging functionality """
import logging
from typing import Union


class Logger:
    """ Logger class, provides unified point for logging and errors """
    def __init__(self, logger: logging.Logger):
        """
        :param logger: logging.Logger object, generated by Logger.logger_setup()
        """
        self.log_handler: logging.Logger = logger

    def log(self, msg: str, debug: bool = False) -> None:
        """
        Log an info or debug message.

        :param msg: str, message to log
        :param debug: bool, default is False
        """
        if debug:
            self.log_handler.debug(msg)
        else:
            self.log_handler.info(msg)

    def err(self, err_msg: Union[str, Exception], fatal: bool = True) -> None:
        """
        Log an error or warning message. If it is an error, call sys.exit(1)

        :param err_msg: str, error message to log
        :param fatal: bool, default is True, log as error and call sys.exit(1) after
        """
        if fatal:
            self.log_handler.error(err_msg)
        else:
            self.log_handler.warning(err_msg)

    @staticmethod
    def logger_setup(logger_name: str, logger_path: str, log_lvl: int) -> logging.Logger:
        """
        Setup a StreamHandler and a FileHandler logger.

        :param logger_name: name of the Logger
        :param logger_path: data_path for the FileHandler
        :param log_lvl: logger's lvl
        :return: logging.Logger
        """
        logger = logging.getLogger(logger_name)

        # Create handlers
        f_l = logging.FileHandler(logger_path)

        # Set debug levels
        logger.setLevel(log_lvl)
        f_l.setLevel(log_lvl)

        # Set formatter
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        f_l.setFormatter(formatter)

        # Add handlers
        logger.addHandler(f_l)

        return logger
